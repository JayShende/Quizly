generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  responses     Response[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

// Quizly Models

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  lastQuestionOrder Int        @default(0)
  questions   Question[]
  responses   Response[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id        String     @id @default(cuid())
  text      String
  quizId    String
  quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   Option[]
  answers   Answer[]
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([quizId])
}

model Option {
  id          String    @id @default(cuid())
  text        String
  questionId  String
  isCorrectAnswer Boolean @default(false)
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers Answer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Response {
  id        String    @id @default(cuid())
  quizId    String
  quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId    String

  score     Json?
  user      User?     @relation(fields: [userId], references: [id])
  answers   Answer[]  
  createdAt DateTime  @default(now())

  @@index([quizId])
  @@index([userId])
}

model Answer {
  id         String         @id @default(cuid())
  responseId String
  response   Response       @relation(fields: [responseId], references: [id], onDelete: Cascade)
  questionId String
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)

 optionId String
option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)


  createdAt  DateTime @default(now())
}

